BERNE Corentin
FERNANDES Jeremy
OCHIER Sebastien
SOULIER Clément

Projet Stockage clé-valeur

Fonctionnalités offertes par notre système de stockage clé-valeur :
	- Client/Serveur : différents clients peuvent accéder à notre serveur de stockage et y stocker des données simples (entiers, chaînes de caractères) ou plus complexes (listes).
		Cet aspect a été réalisé grâce à RMI. 
	- Cache LRU : nous pouvons fixer un nombre maximum d'objets à stocker sur le serveur.
	- Partitionnement : notre système de stockage est découpé en plusieurs serveurs.
	- Gestion des accès concurrents : nos méthodes sont synchronisées, un seul client à la fois peut stocker / accéder à un objet.
	- Manipulation de listes : un utilisateur peut modifier une liste qu'il a stockée de façon similaire à ce qui est proposé par Redis.
	
Fonctionnalités validées à l'aide de tests unitaires :
	- Les différentes fonctionnalités du système de stockage (stocker, accéder, supprimer) (coverage 100%).
	- Cache LRU (suppression de la donnée la moins récemment accédée) (coverage 100%).
	- Manipulation de listes (coverage 100%).
	- Interface serveur (coverage 70%).
	
Manuel d'utilisation :
	Pour lancer un serveur, il faut au préalable lancer RMIregistry grâce au script Serveur présent à la racine du projet.
	add-serveur : pour ajouter un serveur
	stock : pour stocker un couple clé-valeur
	stock-list: pour stocker une liste d'entiers
	retrieve <key>: pour obtenir l'objet associé à une clé
	-h, --help, help : pour afficher cette aide
	q, quit, quitter, exit : pour terminer l'execution du client
	(N.B. les commandes de manipulation des listes sont les mêmes que Redis)
	lindex <key> <index> : get an element from a list by its index
	linsert <key> <BEFORE|AFTER> <pivot> <value> : Insert an element before of after an other element
	llen <key> : get length of a list
	lpop <key> : remove and get the first element in a list
	lpush <key> : prepend one or multi element to a list
	lpushx <key> <value> : prepend one element to a list, only if the list exists
	lrange <key> <start> <stop> : get a range of elements from a list
	lrem <key> <count> <value>: remove elements from a list
	lset <key> <index> <value>: set the value of a element in a list by its index
	ltrim <key> <start> <stop>: trim a list to a specified range

Feedback :
Travis est plutôt simple à mettre en place, à l'exception du fait qu'il faut créer un autre fichier pom.xml à la racine du projet pour qu'il utilise Maven plutôt qu'Ant.
Même si il n'y a pas beaucoup de tests unitaires sur ce projet, on comprend vite l'intérêt d'un tel outil pour s'assurer qu'un nouveau commit ne "casse" rien de ce qui existe déjà.
